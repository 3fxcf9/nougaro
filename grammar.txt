This is the AST of the Nougaro language. This AST is computed by the Parser (src.parser.Parser).

statements : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement  : KEYWORD:RETURN expr?
           : KEYWORD:IMPORT IDENTIFIER
           : KEYWORD:EXPORT IDENTIFIER
           : KEYWORD:CONTINUE
           : KEYWORD:BREAK
           : expr

expr       : KEYWORD:VAR IDENTIFIER (COMMA IDENTIFIER)?* (EQ|PLUSEQ|MINUSEQ|MULTEQ|DIVEQ|POWEQ|FLOORDIVEQ|PERCEQ|OREQ|ANDEQ|XOREQ|BITWISEANDEQ|BITWISEOREQ|BITWISEXOREQ|EEEQ|GTEQ|GTEEQ|LTEQ|LTEEQ) expr (COMMA expr)?*
           : KEYWORD:DEL IDENTIFIER
           : KEYWORD:WRITE expr (TO|TO_AND_OVERWRITE) expr INT?
           : KEYWORD:READ expr (TO IDENTIFIER)? INT?
           : KEYWORD:ASSERT expr (COMMA expr)?
           : comp_expr ((KEYWORD:AND|KEYWORD:OR|KEYWORD:XOR|BITWISEAND|BITWISEOR|BITWISEXOR) comp_expr)*

comp_expr  : (KEYWORD:NOT|BITWISENOT) comp_expr
           : arith_expr ((EE|LT|GT|LTE|GTE|KEYWORD:IN) arith_expr)*

arith_expr : term ((PLUS|MINUS) term)*

term       : factor ((MUL|DIV|PERC|FLOORDIV) factor)*

factor     : (PLUS|MINUS) factor
           : power

power      : call (DOT call)?* (POW factor)*

call       : atom (LPAREN (MUL? expr (COMMA MUL? expr)?*)? RPAREN)?*

atom       : (INT|FLOAT)(E_INFIX INT)?
           : STRING (STRING NEWLINE?*)?*
           : IDENTIFIER (INTERROGATIVE_PNT IDENTIFIER|expr)?*
           : LPAREN expr RPAREN
           : list_expr
           : if_expr
           : for_expr
           : while_expr
           : do_expr
           : func_def
           : class_def

list_expr  : LSQUARE (MUL? expr (COMMA MUL? expr)?*)? RSQUARE

if_expr    : KEYWORD:IF expr KEYWORD:THEN
             ((statement if_expr_b|if_expr_c?)
           | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c))

if_expr_b  : KEYWORD:ELIF expr KEYWORD:THEN
             ((statement if_expr_b|if_expr_c?)
           | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c))

if_expr_c  : KEYWORD:ELSE
             (statement
           | (NEWLINE statements KEYWORD:END))

for_expr   : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr (KEYWORD:STEP expr)? KEYWORD:THEN
             statement | (NEWLINE statements KEYWORD:END)
           : KEYWORD:FOR IDENTIFIER KEYWORD:IN expr KEYWORD:THEN
             statement | (NEWLINE statements KEYWORD:END)

while_expr : KEYWORD:WHILE expr KEYWORD:THEN
             statement | (NEWLINE statements KEYWORD:END)

do_expr    : KEYWORD:DO (statement | (NEWLINE statements NEWLINE)) KEYWORD:THEN KEYWORD:LOOP KEYWORD:WHILE expr

func_def   : KEYWORD:DEF IDENTIFIER?
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
             (ARROW expr)
           | (NEWLINE statements KEYWORD:END)

class_def  : KEYWORD:CLASS IDENTIFIER?
             (LPAREN IDENTIFIER? RPAREN)?
             (ARROW expr)
           | (NEWLINE statements KEYWORD:END)
