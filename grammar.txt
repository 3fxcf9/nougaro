statements : NEWLINE* expr (NEWLINE+ expr)* NEWLINE

expr       : KEYWORD:VAR IDENTIFIER EQ expr
           : comp_expr ((KEYWORD:AND|KEYWORD:OR|KEYWORD:XOR) comp_expr)*

comp_expr  : KEYWORD:NOT comp_expr
           : arith_expr ((EE|LT|GT|LTE|GTE) arith_expr)*

arith_expr : term ((PLUS|MINUS) term)*

term       : factor ((MUL|DIV) factor)*

factor     : (PLUS|MINUS) factor

power      : call (POW factor)*

call       : abs (LPAREN (expr (COMMA expr)*)? RPAREN)?*

abs        : (ABS) atom (ABS)*

atom       : INT|FLOAT|STRING|IDENTIFIER
           : LPAREN expr RPAREN
           : list_expr
           : if_expr
           : for_expr
           : while_expr
           : func_def

list_expr  : LSQUARE (expr (COMMA expr)*) RSQUARE

if_expr    : KEYWORD:IF expr KEYWORD:THEN
             (expr if_expr_b|if_expr_c?)
           | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c)

if_expr_b  : KEYWORD:ELIF expr KEYWORD:THEN
             (expr if_expr_b|if_expr_c?)
           | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c)

if_expr_c  : KEYWORD:ELSE
             expr
           | (NEWLINE statements KEYWORD:END)

for_expr   : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr (KEYWORD:STEP expr)? KEYWORD:THEN
             expr | (NEWLINE statements KEYWORD:END)
           : KEYWORD:FOR IDENTIFIER IN expr KEYWORD:THEN
             expr | (NEWLINE statements KEYWORD:END)

while_expr : KEYWORD:WHILE expr KEYWORD:THEN
             expr | (NEWLINE statements KEYWORD:END)

func_def   : KEYWORD:DEF IDENTIFIER?
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
             (ARROW expr)
           | (NEWLINE statements KEYWORD:END)
