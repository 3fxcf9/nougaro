# a simple Reverse Polish Notation calculator
import math

print()
print("Welcome to the Nougaro calculator!")
print("Enter 'exit' to exit, 'cls' or 'clear' to clear the screen.")
print("This calculator uses the Reverse Polish Notation.")
print("Examples:")
print()
print("  1 + 1 will be 1 1 +")
print("  1 ^ 3 will be 1 3 ^")
print("  (1 + 1) * (12 + 13) will be 1 1 + 12 13 + *")
print()

var answer = 0

while True then
    var calcul = input("calc> ")
    var should_continue = False
    
    if calcul in ["exit", "done"] then break
    if calcul == "" then continue
    if calcul in ["clear", "cls"] then; clear(); continue; end
    
    # tokenize
    var tokens = []
    var floating_point = 0
    for char in calcul then
        var old_floating_point = floating_point
        var current_tok = char
        if char in "0123456789" then
            if len(tokens) != 0 and not is_num(tokens(-1)) then
                if tokens(-1) == "-" then
                    pop(tokens, -1)
                    append(tokens, -int(char))
                elif tokens(-1) == '.' then
                    pop(tokens, -1)
                    var floating_point += 1
                    if tokens(-1) >= 0 then
                        replace(tokens, -1, float(tokens(-1)) + float(char)/10)
                    else
                        replace(tokens, -1, float(tokens(-1)) - float(char)/10)
                    end
                else
                    append(tokens, int(char))
                end
            elif len(tokens) != 0 then  # last token is num
                if tokens(-1) >= 0 then
                    if is_int(tokens(-1)) then
                        replace(tokens, -1, tokens(-1)*10 + int(char))
                    else  # float
                        var floating_point += 1
                        replace(tokens, -1, round(tokens(-1) + float(char)/round(10 ^ floating_point),\
                                                               floating_point)\
                               )
                    end
                else
                    if is_int(tokens(-1)) then
                        replace(tokens, -1, tokens(-1)*10 - int(char))
                    else  # float
                        var floating_point += 1
                        replace(tokens, -1, round(tokens(-1) - float(char)/(10 ^ floating_point),\
                                                               floating_point)\
                               )
                    end
                end
            else
                append(tokens, int(char))
            end
        elif char == '.' then
            append(tokens, '.')
        elif char == " " or char == chr(8239) or char == chr(160) then  # the 2 others are NNBSP and NBSP
            append(tokens, "space")
        elif char in "+-*/^" then
            append(tokens, char)
        elif char == 'a' then
            append(tokens, char)
        elif char == 'n' and len(tokens) > 0 and tokens(-1) == "a" then
            replace(tokens, -1, 'an')
        elif char == 's' and len(tokens) > 0 and tokens(-1) == "an" then
            replace(tokens, -1, 'ans')
        elif char == 's' then
            append(tokens, char)
        elif char == 'q' and len(tokens) > 0 and tokens(-1) == "s" then
            replace(tokens, -1, "sq")
        elif char == "r" and len(tokens) > 0 and tokens(-1) == "sq" then
            replace(tokens, -1, "sqr")
        elif char == "t" and len(tokens) > 0 and tokens(-1) == "sqr" then
            replace(tokens, -1, "sqrt")
        elif char == "p" then
            append(tokens, char)
        elif char == "i" and len(tokens) > 0 and tokens(-1) == "p" then
            replace(tokens, -1, "pi")
        elif char == "m" then
            append(tokens, char)
        elif char == "o" and len(tokens) > 0 and tokens(-1) == "m" then
            replace(tokens, -1, "mo")
        elif char == "d" and len(tokens) > 0 and tokens(-1) == "mo" then
            replace(tokens, -1, "mod")
        elif char == "\t" then
            print("Error: use spaces instead of tabulations.")
            var should_continue = True
            break
        else
            print("Error: illegal char: " + char)
            var should_continue = True
            break
        end
        if old_floating_point == floating_point then var floating_point = var old_floating_point = 0
    end
        
    if should_continue then continue
    
    # parse
    var stack = []
    var i = -1
    var last_token = ""
    for token in tokens then
        var i += 1
        if last_token == "/" and token == "/" then continue
        if is_num(token) then
            append(stack, token)
        elif token == "sqrt" and len(stack) > 0 and is_num(stack(-1)) then
            if stack(-1) >= 0 then
                replace(stack, -1, math.sqrt(stack(-1)))
            else
                print("Error: a negative number (" + str(stack(-1)) + ") doesn't have a square root.")
                var should_continue = True
                break
           end
        elif token == "pi" then
           append(stack, math.pi)
        elif token == "ans" then
            append(stack, answer)
        elif token == "mod" and len(stack) > 1 and is_num(stack(-1)) and is_num(stack(-2)) then
            var num1 = stack(-2)
            var num2 = stack(-1)
            var mod = num1 % num2
            pop(stack, -1)
            pop(stack, -1)
            append(stack, mod)
        elif token == "space" then
            void()
        else
            if len(stack) >= 2 then
                if token == "+" then
                    var result = stack(-2) + stack(-1)
                elif token == "-" then
                    var result = stack(-2) - stack(-1)
                elif token == '/' then
                    if len(stack) != 0 and stack(-1) == 0 then
                        print("Error: can not divide by 0")
                        var should_continue = True
                        break
                    end
                    if len(tokens) >= i+2 and tokens(i+1) == "/" then
                        var result = stack(-2) // stack(-1)
                    else
                        var result = stack(-2) / stack(-1)
                    end
                elif token == "*" then
                    var result = stack(-2) * stack(-1)
                elif token == "^" then
                    var result = stack(-2) ^ stack(-1)
                else
                    print("Error: invalid token: " + str(token))
                    var should_continue = True
                    break
                end
                pop(stack, -1)
                pop(stack, -1)
                append(stack, result)
            elif token == "a" or token == "s" or token == "p" then
                print("Error: illegal char: " + token)
                var should_continue = True
                break
            else
                print("Error")
                var should_continue = True
                break
            end
        end
        var last_token = token
    end
    
    if should_continue then continue
    
    if len(stack) != 1 then
        print("Error: more than one result after execution, consider check your input.")
        continue
    end
    
    print(stack(0))
    var answer = stack(0)
end
