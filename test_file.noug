print("Hello Toulouse!")  # the entire world is actually Toulouse, trust me. If you say 'pain au chocolat', you're not in the world.
# comment

# basic syntax
"a" ; "b"

# operators
assert 1 ^ 2 == 1
assert 1 * 2 == 2
assert 1 % 2 == 1
assert 1 / 2 == 0.5
assert 1 // 2 == 0
assert 1 + 2 == 3
assert 1 - 2 == -1
assert (1 & 2) == 0
assert (1 | 2) == 3
assert (3 ^^ 2) == 1
assert 1e3 == 1000
assert 1e-3 == 0.001
assert 1.1e1 == 11
# assert 1.1e-1 == 0.11  # it crashes because 1.1e-1 = 0.11000000000000001...

# variables
## definition
var hello = "Hello Toulouse!"
assert (var a = 1) == 1
assert (var b = var c = 2) == 2

assert (1 + (var a = 2)) == 3

## edit
assert (var a = 1) == 1
assert (var a += 1) == 2
assert (var a -= 1) == 1
assert (var a *= 1) == 1
assert (var a /= 1) == 1
assert (var a ^= 1) == 1
assert (var a //= 1) == 1
assert (var a %= 1) == 0
assert (var a ||= 1) == 1
assert (var a &&= 1) == 1
assert (var a ^^^= 1) == 0
assert (var a |= 1) == 1
assert (var a &= 1) == 1
assert (var a ^^= 1) == 0
assert (var a === 1) == 0
assert (var a <== 1) == 1
assert (var a <<= 1) == 0
assert (var a >== 1) == 0
assert (var a >>= 1) == 0

## access
assert a==0

## deletion
del a

# strings
"a"
'b'
"a\""
'b\''
"a\nb"
"a\tb"
"a\\b"

## operations
assert ("a" + "b") == 'ab'

## tests
assert True==1
assert False==0
assert null==0
assert "a" in "this is an example string"
assert 1 in "123"
assert "azerty" in ["azerty", "qwerty", "bÃ©po"]
assert 1 > 0
assert 1 >= 1
assert 0 < 1
assert 1 <= 1
assert True
assert True and True
assert True or False
assert False or True
assert not (False and True)
assert False xor True
assert not (True xor True)
assert not False

# functions
## definition
def func()
    ## return
    return "str"
end

## call
assert (def()->"str")() == func()

# builtin funcs
print("Please test these builtin functions after the execution of the test:")
print("* input")
print("* input_int")
print("* input_num")
print("* __gpl__")
print("* exit")
print("* clear")
print("* run")
print("* example")
print("* system_call")
print("* __test__")

assert print(hello) == None
assert print_ret(hello) == hello

assert type("a") == "str"
assert type(123) == "int"
assert type(3.14) == "float"
assert type([1, 2, 3]) == "list"
assert type(def()->null) == "func"
assert type(type) == "built-in func"

assert is_int(123)
assert is_float(3.14)
assert is_num(123)
assert is_num(3.14)
assert is_str("abc")
assert is_list([1, 2, 3])
assert is_func(is_func)
assert is_func(def()->null)
assert is_none(None)

assert str(123) == "123"
assert int("123") == 123
assert float("3.14") == 3.14
assert list("abc") == ["a", "b", "c"]

assert upper("aZeRtY") == "AZERTY"
assert lower("aZeRtY") == "azerty"
assert split("lorem ipsum dolor sit amet") == ["lorem", "ipsum", "dolor", "sit", "amet"]
assert split("lorem ipsum dolor sit amet", 'o') == ["l", "rem ipsum d", "l", "r sit amet"]
assert split("lorem ipsum, dolor sit amet", ',') == ["lorem ipsum", " dolor sit amet"]
assert len("lorem ipsum dolor sit amet") == 26

assert ord('a') == 0x61
assert chr(0x61) == 'a'
assert chr(0x48) + chr(0b1100101) + 2*chr(0o154) + chr(111) + chr(32) + chr(84) + chr(111) + chr(117) + chr(108) + chr(111) + chr(117) + chr(115) + chr(101) + chr(33) == hello

assert append(["lorem", "ipsum"], "dolor") == ["lorem", "ipsum", "dolor"]
assert pop(["lorem", "ipsum", "dolor", "sit", "amet"]) == ["lorem", "ipsum", "dolor", "sit"]
assert pop(["lorem", "ipsum", "dolor", "sit", "amet"], -1) == ["lorem", "ipsum", "dolor", "sit"]
assert pop(["lorem", "ipsum", "dolor", "sit", "amet"], 0) == ["ipsum", "dolor", "sit", "amet"]
assert insert(["lorem", "ipsum"], "dolor") == append(["lorem", "ipsum"], "dolor")
assert insert(["lorem", "ipsum", "sit", "amet"], "dolor", 2) == ["lorem", "ipsum", "dolor", "sit", "amet"]
assert replace(["lorem", "ipsum", "azerty", "sit", "amet"], 2, "dolor") == ["lorem", "ipsum", "dolor", "sit", "amet"]

assert extend(["lorem", "ipsum"], ["dolor", "sit", "amet"]) == ["lorem", "ipsum", "dolor", "sit", "amet"]
assert extend(["lorem", "ipsum", "dolor"], ["dolor", "sit", "amet"], True) == ["lorem", "ipsum", "dolor", "sit", "amet"]
assert get(["lorem", "ipsum"], 1) == "ipsum"
assert max([12, 6, 4, 45, 7]) == 45
assert max(["lorem", 12, 6, "ipsum", 4, 45, "dolor", 7], True) == 45
assert min([12, 6, 4, 45, 7]) == 4
assert min(["lorem", 12, 6, "ipsum", 4, 45, "dolor", 7], True) == 4
assert len(split("lorem ipsum dolor sit amet")) == 5

assert void() == None
assert __is_keyword__("assert")
assert not __is_keyword__("print")  # we're not in Python 2 x)
assert __is_valid_token_type__("PLUS")  # the + token
assert not __is_valid_token_type__("LOREM_IPSUM")
assert __how_many_lines_of_code__(False) != 0

# everything is fine in this file
print("everything seems fine")
